MyBatis 是支持普通 SQL查询，存储过程和高级映射的优秀持久层框架。
MyBatis 消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。
MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Ordinary Java Objects，普通的 Java对象）映射成数据库中的记录。
每个MyBatis应用程序主要都是使用SqlSessionFactory实例的，一个SqlSessionFactory实例可以通过SqlSessionFactoryBuilder获得。
SqlSessionFactoryBuilder可以从一个xml配置文件或者一个预定义的配置类的实例获得。

总体流程：
(1)加载配置并初始化
触发条件：加载配置文件
处理过程：将SQL的配置信息加载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配置），存储在内存中。
(2)接收调用请求
触发条件：调用Mybatis提供的API
传入参数：为SQL的ID和传入参数对象
处理过程：将请求传递给下层的请求处理层进行处理。
(3)处理操作请求
触发条件：API接口层传递请求过来
传入参数：为SQL的ID和传入参数对象
处理过程：
(A)根据SQL的ID查找对应的MappedStatement对象。
(B)根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。
(C)获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。
(D)根据MappedStatement对象中的结果映射配置对得到的执行结果进行转换处理，并得到最终的处理结果。
(E)释放连接资源。
(4)返回处理结果将最终的处理结果返回。

功能架构：
Mybatis的功能架构分为三层：
(1)API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。
(2)数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。
(3)基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。
为上层的数据处理层提供最基础的支撑。

框架结构：
(1)加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的配置信息加载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配置），存储在内存中。
(2)SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象（可以是Map、JavaBean或者基本数据类型），Mybatis会根据SQL的ID找到对应的MappedStatement，然后根据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。
(3)SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。
(4)结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、JavaBean或者基本数据类型，并将最终结果返回。

MyBatis采用功能强大的基于OGNL的表达式来消除其他元素。
提供xml标签，支持编写动态sql。


缺点：
1、编写SQL语句时工作量很大，尤其是字段多、关联表多时，更是如此。 
2、SQL语句依赖于数据库，导致数据库移植性差，不能更换数据库。
3、框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。  
4、二级缓存机制不佳


传统jdbc操作数据库的问题：
1、数据库连接，使用时创建，不使用立即释放，对数据库进行频繁的开启和关闭，造成数据库资源浪费，性能数据库性能。
解决思路：使用数据库连接池管理数据库连接

2、将sql语句硬编码到java代码中，如果sql改变，需要重新编译java代码，不利于系统维护
解决思路：将sql语句配置在xml配置文件中

3、向PreapredStatement中设置参数，对占位符号位置和设置参数值，硬编码在java中
解决思路：将sql语句及占位符和参数配置在xml中

4、从resultSet遍历结果集数据，存在硬编码，获取表的字段进行硬编码，不利于维护
解决思路：将查询的结果集，自动映射到java对象


mybatis让程序员精力放到sql上。
mybatis可以向preparedStatement中的输入参数自动进行输入映射，对查询结果集灵活映射成java对象（输出映射）

1.sqlMapConfig.xml(mybatis的全局配置文件),配置了数据源，事务等mybatis运行环境，这些一旦和spring整合，数据源将由第三方管理（比如c3p0），事务由spring管理。
配置映射文件mapper.xml
2.SqlSessionFactory(会话工厂），根据配置文件创建工厂
3.SqlSession(会话)---接口，面向用户的接口，用来操作数据库
4.Executor(执行器),是一个接口（基本执行器，缓存执行器）
作用：sqlSession内部通过执行器操作数据库
5.Mapped Statement(底层封装对象)
作用：对数据库存储封装，包括sql,输入参数，输出结果类型



mybatis和hibernate区别和应用场景
hibernate:
1、标准ORM框架，门槛高，不需要写sql，sql自动生成，优化sql比较困难
2、使用于需求变化不多的中小型项目，比如：后台管理系统erp.orm,oa
mybatis: 
1、专注sql本身，mybatis是一个不完全的ORM框架，虽然程序员自己写sql,但是mybatis也可以实现映射（输入映射，输出映射）
2、适用于需求变化较多的项目，比如：互联网项目


MyBatis语法：

#{} 和 ${} 的用法：
1.#{}表示一个占位符，传统写法：select * from user where id = ? 
占位符就是? 
#{}接收输入参数，类型可以是简单类型，pojo,hashmap
#{}接收pojo对象值，是通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取
#{}接收简单类型，#{}中可以写value或其他名称

2.${}表示一个拼接符号，会引起sql注入，所以不建议使用
${}接收输入参数，类型可以是简单类型，pojo,hashmap
${}接收pojo对象值，是通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取
${}接收简单类型，#{}中只能写value

开发规范：
a、在mapper.xml中namespace等于mapper接口地址
b、mapper.Java接口的方法名和mapper.xml中statement的id一致
c、mapper.java接口中方法的参数和mapper.xml中的parameterType指定的类型一致
d、mapper.java接口中的返回值和mapper.xml中的resultType指定的类型一致
注意：持久层方法的参数可以使用包装类型，比如map,但是service方法不建议使用包装类型（不利于业务层扩展，谁也不知道可map里面key是什么）

输入映射，输出映射:
输入映射：
parameterType:类型可以是简单类型(直接用)，pojo(属性.属性....  ognl表达式),hashmap(key)
关于hashmap，#{} 里面写的是hashmap的key

输出映射：
resultType：
作用：将查询结果按照sql列名 pojo属性名一致性映射到pojo中
使用resultType进行输出映射，只有查询出来的列名和pojo中的是属性名一致，该列才能映射成功，
测试：可以将sql语句查询的字段取一个别名，这样讲映射不成功
a、如果查询出来的列名和pojo的属性名全部不一致，将不会创建pojo对象
b、只要查询出来的列名和pojo的属性有一个一致，将会创建pojo对象

关于输出的是一个pojo，还是一个pojo集合，resultType的配置一样，不同的是mapper接口一个返回的是
pojo类型，一个返回的是pojo集合List<Pojo>

使用resultType无法将查询结果映射到pojo对象的pojo属性中。

resultMap：
应用场景：高级输出结果映射
如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性名之间的映射关系。


resultType和resultMap比较:
resultType :使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。
如果没有查询结果的特殊要求建议用resultType
resultMap:需要单独定义resultMap.实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射
pojo的属性中
resultMap可以实现延迟加载，association,collection具有延迟加载功能，而resultType不可以.
