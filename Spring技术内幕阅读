一、spring的设计理念和整体架构
设计目标：为开发者提供一个一站式的轻量级应用开发框架
设计理念：在Java EE的应用开发中，支持POJO和使用javaBean的开发方式，使应用面向接口开发，充分支持OO.

扩展：
POJO:Plain Ordinary Java Object/ Pure Old Java Object.实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称,可以理解为简单的实体类，
顾名思义POJO类的作用是方便程序员使用数据库中的数据表,这个名字用来强调它是一个普通java对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。
理想地讲，一个POJO是一个不受任何限制的Java对象（除了Java语言规范）
Java bean：编程语言java中的术语，在计算机编程中代表java构件（EJB的构件），通常有Session bean，Entity bean，MessageDrivenBean三大类

Session bean：会话构件，是短暂的对象，运行在服务器上，并执行一些应用逻辑处理，它由客户端应用程序建立，其数据需要自己来管理。分为无状态和有状态两种。
Entity bean：实体构件，是持久对象，可以被其他对象调用。在建立时指定一个唯一标示的标识，并允许客户程序，根据实体bean标识来定位beans实例。
多个实体可以并发访问实体bean，事务间的协调由容器来完成。
MessageDriven Bean：消息构件，是专门用来处理JMS（Java Message System）消息的规范（EIB2.0）。JMS是一种与厂商无关的API，用来访问消息收发系统，
并提供了与厂商无关的访问方法，以此来访问消息收发服务。JMS客户机可以用来发送消息而不必等待回应。

JavaBean 是一台机器上同一个地址空间中运行的组件，是进程内组件。
Enterprise JavaBean是在多台机器上跨几个地址空间运行的组件。因此Enterprise JavaBean是进程间组件。

整体架构：
1.SpringIoC:Spring IoC: 包含了最为基本的IoC容器BeanFactory的接口与实现.
 也就是说，在这个Spring的核心包中，不仅定义了IoC容器的最基本接口(BeanFactory) ，也提供了一系列这个接口的实现，
 如XmlBeanFactory就是一个最基本的BeanFactory (IoC容器) ,从名字上可以看到，它能够支持通过XML文件配置的Bean定义信息。
 除此之外， SpringIoC容器还提供了一个容器系列，如SimpleJndiBeanFactory 、StaticListableBeanFactory等。
 我们知道，单纯一个IoC容器对于应用开发来说是不够的，为了让应用更方便地使用IoC容器，还需要在IoC容器的外围提供其他的支持，
 这些支持包括Resource访问资源的抽象和定位等.所有的这些，都是这个Spring IoC模块的基本内容。
 另外，在BeanFactory接口实现中，除了前面介绍的像BeanFactory那样最为基本的容器形态之外， 
 Spring还设计了loC容器的高级形态ApplicationContext应用上下文供用户使用，这些ApplicationContext应用上下文，
 如FileSystemXmlApplicationContext ,ClassPathXmlApplicationContext ，对应用来说，是IoC容器中更面向框架的使用方式.
 同样，为了便于应用开发，像国际化的消息源和应用支持事件这些特性，也都在这个模块中配合IoC容器来实现，
 这些功能围绕着IoC基本容器和应用上下文的实现，构成了整个Spring loC模块设计的主要内容.
2.Spring AOP: 这也是Spring的核心模块，围绕着AOP的增强功能， Spring集成了AspectJ作为AOP的一个特定实现，同时还在JVM动态代理/CGLIB 的基础上，
 实现了一个AOP框架，作为Spring集成其他模块的工具，比如TransactionProxy Factory Bean声明式事务处理，就是通过AOP集成到Spring中的。
 在这个模块中， Spring AOP实现了一个完整的建立AOP代理对象，实现AOP拦截器，直至实现各种Advice通知的过程.
 在对这个模块的分析中可以看到， AOP模块的完整实现是我们熟悉AOP实现技术的一个不可多得的样本。
3.Spring MVC: 对于大多数企业应用而言， Web应用巳经是一种普遍的软件发布方式，而在Web应用的设计中， MVC模式已经被广泛使用了。
 在Java的社区中，也有很多类似的MVC框架可以选择，而且这些框架往往和Web UI设计整合在一起，对于定位于提供整体平台解决方案的Spring ，
 这样的整合也是不可缺少的。Spring MVC就是这样一个模块，这个模块以DispatcherServ let为核心，实现了MVC模式，包括怎样与Web容器环境的集成， 
 Web请求的拦截、分发、处理和ModelAndView数据的返回，以应如何集成各种UI视图展现和数据表现，如PDF 、Excel等，通过这个模块，可以完成Web的前端设计。
4.Spring JDBC/Spring ORM: 在企业应用中，对以关系数据库为基础的数据的处理是企业应用的一个重要方面，而对于关系数据库的处理， Java提供了JDBC来进行操作，
 但在实际的应用中，单纯使用JDBC的方式还是有些繁琐，所以在JDBC规范的基础上，Spring对JDBC做了一层封装，使通过JDBC完成的对数据库的操作更加简洁。
 SpringJDBC包提供了JdbcTemplate作为模桓类，封装了基本的数据库操作方撞，如数据的查询、更新等，另外， SpringJDBC还提供了RDBMS的操作对象，
 这些操作对象可以使应用以更面向对象的方陆来使用JDBC ，比如可以使用MappingSqlQuery将数据库数据记录直接映射到对象集合，类似一个极为简单的ORM工具。
 除了通过SpringJDBC对数据库进行操作外，Spring还提供了许多对ORM工具的封装，这些封装包括了常用的ORM工具，如Hibernate 、iBatis等，
 这一层封装的作用是让应用更方便地使用这些ORM工具，而不是替代这些ORM 工具，比如可以把对这些工具的使用和Spring提供的声明式事务处理结合起来。
 同时， Spring还提供了许多模板对象，如HibernateTemaplate这样的工具来实现对Hibernate的驱动，这些模缸对象往往包装使用Hibernate的一些通用过程，
 比如Session的获取和关闭、事务处理的关联等，从而把一些通用的特性实现抽象委IJSpring中来，更充分地体现了Spring的平台作用。
5.Spring事务处理: Spring事务处理是一个通过Spring AOP实现自身功能增强的典型模块。在这个模块中， Spring把在企业应用开发中事务处理的主要过程抽象出来，
 并且简洁地通过AOP的切面增强实现了声明式事务处理的功能。这个声明式事务处理的实现，使应用只需要在loC容器中对事务属性进行配置即可完成，
 同时，这些事务处理的基本过程和具体的事务处理器实现是无关的，也就是说.应用可以选择不同的具体的事务处理机制，如JTA 、JDBC 、Hibernate等。
 因为使用了声明式事务处理，这些具体的事务处理机制被纳入Spring事务处理的统一框架中完成，并完成与具体业务代码的解藕。
 在这个模块中，可以看到一个通用的实现声明式事务处理的基本过程，比如怎样配置事务处理的拦截器，怎样读入事务配置属性，
 并结合这些事务配置属性对事务对象进行处理，包括事务的创建、挂起、提交、回梅等基本过程，
 还可以看到具体的事务处理器(虫口DataSourceTransactionManager 、HibernateTransactionManager 、JtaTransactionManager等)是怎样封装不同的事务处理机制(JDBC 、Hibernate 、JTA等)的。
6.Spring远端调用: Spring为应用带来的一个好处就是能够将应用解辑。应用解锢，一方面可以降低设计的复杂性，另一方面，可以在解辑以后将应用模块分布式地部署，
 从而提高系统整体的性能。在后一种应用场景下，会用到jSpring的远端调用，这种远端调用是通过Spring的封装从Spring应用到jSpring应用之间的端到端调用。
 在这个过程中，通过Spring的封装，为应用屏蔽了各种通信和调用细节的实现，同时，通过这一层的封装，使应用可以通过选择各种不同的远端调用来实现，
 比如可以使用HTTP调用器(以HTTP协议为基础的) .可以使用第三方的二进制通信实现Hessian/Burlap.甚至还封装了传统Java技术中的RM1调用。
7.Spring应用:从严格意义上来说，这个模块不属于Spring的范围。这部分的应用支持，往往来自一些使用得非常广泛的Spring子项目，或者该子项目本身就可以看成是一个独立的Spring应用，
 比如为Spring处理安全问题的Spring ACEGI后来转化为Spring子项目的Spring Security OAuth等。这个Spring应用支持的部分还有一个重要的组成，
 那就是包括了其他的一些模块，这些模块提供了许多Spring应用与其他技术实现的相关接口，比如与各种J2EE实现规范的接口，对JMS 、JNID、JMX 、JavaMail等的支持，
 Spring应用和Flex前端的接口. Spring应用移植到OSGi平台上运行的接口。通过这个模块的支持，使Spring应用可以便利和简洁地容纳第三方的技术实现，
 不但丰富了Spring应用的功能，而且丰富了整个Spring生态圃，使Spring应用得越来越广泛。
 
Spring的价值:
1.Spring是一个非侵入性(non-invasive) 框架，其目标是使应用程序代码对框架的依赖最小化，应用代码可以在没有Spring或者其他容器的情况下运行。
2.Spring提供了一个一致的编程模型，使应用直接使用POJO开发，从而可以与运行环境(如应用服务器)隔离开来。
3.Spring推动应用的设计风格向面向对象R面向接口编程转变，提高了代码的重用性和可测试性。
4.Spring改进了体系结构的选择，虽然作为应用平台. Spring可以帮助我们选择不同的技术实现，
比如从Hiberante切换到其他ORM工具，从StrutstJ]换到Spring- MVC ，尽管我们通常不会这样做，但是我们在技术方案上选择使用Spring作为应用平台， 
Spring至少为我们提供了这种可能性和选择，从而降低了平台锁定的风险。

总结：
在Spring的应用场景中，众所周知的SSH是我们常见的技术选择，但不见得Spring就只能在这个组合中出现，因为Spring 自身也包括了MVC框架、数据持久化操作等，
同时也因为Spring 自身设计的模块化很好，所以，在使用Spring的时候，对Spring可以按不同角度进行裁剪，并且有不小的选择空间，而这些对应用场景的裁剪和选择，
取决于我们对Spring的认识和应用开发的需要.



二、Spring的核心IoC容器和AOP的实现原理










