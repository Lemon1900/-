一、io包中各类的作用用法详细描述

输入和输出 就是 数据源和目标媒介。
Java的IO包主要关注的是从原始数据源的读取以及输出原始数据到目标媒介。
以下是最典型的数据源和目标媒介：
文件
管道
网络连接
内存缓存
System.in, System.out, System.error(注：Java标准输入、输出、错误输出)

程序从数据源读取数据，然后将数据输出到其他媒介的原理：
source-program-destination

流
流从概念上来说是一个连续的数据流。
你既可以从流中读取数据，也可以往流中写数据。
流与数据源或者数据流向的媒介相关联。
在Java IO中流既可以是字节流(以字节为单位进行读写)，也可以是字符流(以字符为单位进行读写)。
字节流
字节流通常以“stream”命名，比如InputStream和OutputStream。
除了DataInputStream 和DataOutputStream 还能够读写int, long, float和double类型的值以外，其他流在一个操作时间内只能读取或者写入一个原始字节。
字符流
字符流通常以“Reader”或者“Writer”命名。字符流能够读写字符(比如Latin1或者Unicode字符)。

InputStream
java.io.InputStream类是所有Java IO输入流的基类。
如果你正在开发一个从流中读取数据的组件，请尝试用InputStream替代任何它的子类(比如FileInputStream)进行开发。
这么做能够让你的代码兼容任何类型而非某种确定类型的输入流。
通常使用输入流中的read()方法读取数据。
read()方法返回一个整数，代表了读取到的字节的内容(译者注：0 ~ 255)。
当达到流末尾没有更多数据可以读取的时候，read()方法返回-1。
一个简单的示例：
InputStream input = new FileInputStream("c:\\data\\input-file.txt");
int data = input.read(); 
while(data != -1){
     data = input.read();
}

OutputStream
java.io.OutputStream是Java IO中所有输出流的基类。
如果你正在开发一个能够将数据写入流中的组件，请尝试使用OutputStream替代它的所有子类。
一个简单的示例：
OutputStream output = new FileOutputStream("c:\\data\\output-file.txt");
output.write("Hello World".getBytes());
output.close();

组合流
你可以将流整合起来以便实现更高级的输入和输出操作。
比如，一次读取一个字节是很慢的，所以可以从磁盘中一次读取一大块数据，然后从读到的数据块中获取字节。
为了实现缓冲，可以把InputStream包装到BufferedInputStream中。
代码示例：
InputStream input = new BufferedInputStream(new FileInputStream("c:\\data\\input-file.txt"));
缓冲同样可以应用到OutputStream中。你可以实现将大块数据批量地写入到磁盘(或者相应的流)中，这个功能由BufferedOutputStream实现。
缓冲只是通过流整合实现的其中一个效果。你可以把InputStream包装到PushbackInputStream中，之后可以将读取过的数据推回到流中重新读取，在解析过程中有时候这样做很方便。
或者，你可以将两个InputStream整合成一个SequenceInputStream。
将不同的流整合到一个链中，可以实现更多种高级操作。
通过编写包装了标准流的类，可以实现你想要的效果和过滤器。


一个程序需要InputStream或者Reader从数据源读取数据，或者需要OutputStream或者Writer将数据写入到目标媒介中(InputStream和Reader与数据源相关联，OutputStream和writer与目标媒介相关联)
source---InputStream/Reader---program
program--OutputStream/Writer---destination


Java IO中包含了许多InputStream、OutputStream、Reader、Writer的子类。
这样设计的原因是让每一个类都负责不同的功能。

各类用途汇总如下：
文件访问
网络访问
内存缓存访问
线程内部通信(管道)
缓冲
过滤
解析
读写文本 (Readers / Writers)
读写基本类型数据 (long, int etc.)
读写对象

各个类的具体描述：

InputStream
InputStream用于读取基于字节的数据，一次读取一个字节
InputStream inputstream = new FileInputStream("c:\\data\\input-text.txt");
FileInputStream是InputStream的子类，所以可以把FileInputStream实例赋值给InputStream变量。

read()方法
read()方法返回从InputStream流内读取到的一个字节内容(译者注：0~255)，例子如下：
int data = inputstream.read();
可以把返回的int类型转化成char类型：
char aChar = (char) data;

InputStream的子类可能会包含read()方法的替代方法。
比如，DataInputStream允许你利用readBoolean()，readDouble()等方法读取Java基本类型变量int，long，float，double和boolean。

流末尾
如果read()方法返回-1，意味着程序已经读到了流的末尾，此时流内已经没有多余的数据可供读取了。-1是一个int类型，不是byte或者char类型，这是不一样的。
当达到流末尾时，你就可以关闭流了。

read(byte[])
InputStream包含了2个从InputStream中读取数据并将数据存储到缓冲数组中的read()方法，他们分别是：
int read(byte[])
int read(byte, int offset, int length)
一次性读取一个字节数组的方式，比一次性读取一个字节的方式快的多，所以，尽可能使用这两个方法代替read()方法。

read(byte[])方法会尝试读取与给定字节数组容量一样大的字节数，返回值说明了已经读取过的字节数。
如果InputStream内可读的数据不足以填满字节数组，那么数组剩余的部分将包含本次读取之前的数据。
记得检查有多少数据实际被写入到了字节数组中。

read(byte, int offset, int length)方法同样将数据读取到字节数组中，不同的是，该方法从数组的offset位置开始，并且最多将length个字节写入到数组中。
同样地，read(byte, int offset, int length)方法返回一个int变量，告诉你已经有多少字节已经被写入到字节数组中，
所以请记得在读取数据前检查上一次调用read(byte, int offset, int length)的返回值。

这两个方法都会在读取到达到流末尾时返回-1。

OutputStream：
OutputStream类是Java IO API中所有输出流的基类。子类包括BufferedOutputStream，FileOutputStream等等
当写入到输出流的数据逐渐输出完毕时，目标媒介是所有数据的归属地。
write(byte)方法
write(byte)方法用于把单个字节写入到输出流中。
OutputStream的write(byte)方法将一个包含了待写入数据的int变量作为参数进行写入。
只有int类型的第一个字节会被写入，其余位会被忽略。(译者注：写入低8位，忽略高24位)。

OutputStream的子类可能会包含write()方法的替代方法。
比如，DataOutputStream允许你利用writeBoolean()，writeDouble()等方法将基本类型int，long，float，double，boolean等变量写入。

一个OutputStream的write()方法例子：

OutputStream output = new FileOutputStream("c:\\data\\output-text.txt");
while(hasMoreData()) {
    int data = getMoreData();
    output.write(data);
}
output.close();
hasMoreData()的作用是：当有剩余可写数据时，返回true，否则返回false。
write(byte[])
OutputStream同样包含了将字节数据中全部或者部分数据写入到输出流中的方法，分别是write(byte[])和write(byte[], int offset, int length)。
write(byte[])把字节数组中所有数据写入到输出流中。
write(byte[], int offset, int length)把字节数据中从offset位置开始，length个字节的数据写入到输出流。

flush()
OutputStream的flush()方法将所有写入到OutputStream的数据冲刷到相应的目标媒介中。
比如，如果输出流是FileOutputStream，那么写入到其中的数据可能并没有真正写入到磁盘中。
即使所有数据都写入到了FileOutputStream，这些数据还是有可能保留在内存的缓冲区中。
通过调用flush()方法，可以把缓冲区内的数据刷新到磁盘(或者网络，以及其他任何形式的目标媒介)中。

close()
当你结束数据写入时，需要关闭OutputStream。通过调用close()可以达到这一点。
因为OutputStream的各种write()方法可能会抛出IO异常，所以你需要把调用close()的关闭操作方在finally块中执行。


FileInputStream：
FileInputStream可以以字节流的形式读取文件内容。
FileInputStream是InputStream的子类，这意味着你可以把FileInputStream当做InputStream使用(FileInputStream与InputStream的行为类似)。

一个FileInputStream的例子：
InputStream input = new FileInputStream("c:\\data\\input-text.txt");
int data = input.read();while(data != -1) {
    //do something with data...
    doSomethingWithData(data);
    data = input.read();
}
input.close();

FileInputStream也有其他的构造函数，允许你通过不同的方式读取文件。(请移步阅读源码)
根据官方文档，FileInputStream有三个构造器
Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system.
Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system.
Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system.

至于你该采用参数是String对象还是File对象的构造函数，取决于你当前是否已经拥有一个File对象，
也取决于你是否要在打开FileOutputStream之前通过File对象执行某些检查(比如检查文件是否存在)。

FileOutputStream
FileOutputStream可以往文件里写入字节流，它是OutputStream的子类，所以你可以像使用OutputStream那样使用FileOutputStream。

文件内容的覆盖Override、追加Appending
当你创建了一个指向已存在文件的FileOutputStream，你可以选择覆盖整个文件，或者在文件末尾追加内容。通过使用不同的构造函数可以实现不同的目的。
OutputStream output = new FileOutputStream("c:\\data\\output-text.txt");//overwrites file
OutputStream output = new FileOutputStream("c:\\data\\output-text.txt", true); //appends to file
OutputStream output = new FileOutputStream("c:\\data\\output-text.txt", false); //overwrites file

ByteArrayInputStream
ByteArrayOutputStream
ByteArrayInputStream允许你从字节数组中读取字节流数据
eg:
byte[] bytes = ... //get byte array from somewhere.
InputStream input = new ByteArrayInputStream(bytes);
int data = input.read();
while(data != -1) {
    //do something with data
    data = input.read();
}
input.close();

ByteArrayOutputStream允许你以数组的形式获取写入到该输出流中的数据
ByteArrayOutputStream output = new ByteArrayOutputStream();
//write data to output stream
byte[] bytes = output.toByteArray();


BufferedInputStream
BufferedOutputStream
BufferedInputStream能为输入流提供缓冲区，能提高很多IO的速度。
你可以一次读取一大块的数据，而不需要每次从网络或者磁盘中一次读取一个字节。特别是在访问大量磁盘数据时，缓冲通常会让IO快上许多。
为了给你的输入流加上缓冲，你需要把输入流包装到BufferedInputStream中.
InputStream input = new BufferedInputStream(new FileInputStream("c:\\data\\input-file.txt"));
很简单.你可以给BufferedInputStream的构造函数传递一个值，设置内部使用的缓冲区设置大小(译者注：默认缓冲区大小8 * 1024B)，就像这样：
InputStream input = new BufferedInputStream(new FileInputStream("c:\\data\\input-file.txt"), 8 * 1024);
这个例子设置了8KB的缓冲区。最好把缓冲区大小设置成1024字节的整数倍，这样能更高效地利用内置缓冲区的磁盘。
除了能够为输入流提供缓冲区以外，其余方面BufferedInputStream基本与InputStream类似

与BufferedInputStream类似，BufferedOutputStream可以为输出流提供缓冲区。可以构造一个使用默认大小缓冲区的BufferedOutputStream(译者注：默认缓冲区大小8 * 1024B)


DataInputStream
DataOutputStream
DataInputStream可以使你从输入流中读取Java基本类型数据，而不必每次读取字节数据。
你可以把InputStream包装到DataInputStream中，然后就可以从此输入流中读取基本类型数据了
DataInputStream input = new DataInputStream(new FileInputStream("binary.data"));
int aByte = input.read();
int anInt = input.readInt();
float aFloat = input.readFloat();
double aDouble = input.readDouble();//etc.
input.close();

DataOutputStream可以往输出流中写入Java基本类型数据，例子如下：
DataOutputStream output = new DataOutputStream(new FileOutputStream("binary.data"));
output.write(45);
//byte data output.writeInt(4545);
//int data output.writeDouble(109.123);
//double data  output.close();

ObjectInputStream
ObjectOutputStream
ObjectInputStream能够让你从输入流中读取Java对象，而不需要每次读取一个字节。
你可以把InputStream包装到ObjectInputStream中，然后就可以从中读取对象了
bjectInputStream input = new ObjectInputStream(new FileInputStream("object.data"));
MyClass object = (MyClass) input.readObject(); //etc.
input.close();
在这个例子中，你读取的对象必须是MyClass的一个实例，并且必须事先通过ObjectOutputStream序列化到“object.data”文件中

ObjectOutputStream能够让你把对象写入到输出流中，而不需要每次写入一个字节。
你可以把OutputStream包装到ObjectOutputStream中，然后就可以把对象写入到该输出流中了。
ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream("object.data"));
MyClass object = new MyClass();  output.writeObject(object); //etc.
output.close();
例子中序列化的对象object现在可以从ObjectInputStream中读取了。


Reader 
Writer
Reader是Java IO中所有Reader的基类。
Reader与InputStream类似，不同点在于，Reader基于字符而非基于字节。
换句话说，Reader用于读取文本，而InputStream用于读取原始字节。
Reader通常与文件、字符数组、网络等数据源相关联.
Java内部使用UTF8编码表示字符串。
输入流中一个字节可能并不等同于一个UTF8字符。如果你从输入流中以字节为单位读取UTF8编码的文本，并且尝试将读取到的字节转换成字符，你可能会得不到预期的结果。

read()方法返回一个包含了读取到的字符内容的int类型变量(译者注：0~65535)。如果方法返回-1，表明Reader中已经没有剩余可读取字符，此时可以关闭Reader。
-1是一个int类型，不是byte或者char类型，这是不一样的。
你通常会使用Reader的子类，而不会直接使用Reader。Reader的子类包括InputStreamReader，CharArrayReader，FileReader等等。

Writer是Java IO中所有Writer的基类。
与Reader和InputStream的关系类似，Writer基于字符而非基于字节，Writer用于写入文本，OutputStream用于写入字节。
同样，你最好使用Writer的子类，不需要直接使用Writer，因为子类的实现更加明确，更能表现你的意图。
常用子类包括OutputStreamWriter，CharArrayWriter，FileWriter等。
Writer的write(int c)方法，会将传入参数的低16位写入到Writer中，忽略高16位的数据。


InputStreamReader
OutputStreamWriter
这两个类把字节流转换成字符流，中间做了数据的转换，类似适配器模式的思想
InputStreamReader的构造器：
InputStreamReader(InputStream in)
Creates an InputStreamReader that uses the default charset.
InputStreamReader(InputStream in, Charset cs)
Creates an InputStreamReader that uses the given charset.
InputStreamReader(InputStream in, CharsetDecoder dec)
Creates an InputStreamReader that uses the given charset decoder.
InputStreamReader(InputStream in, String charsetName)
Creates an InputStreamReader that uses the named charset.

其他的构造函数，能够让你指定将底层字节流解释成何种编码的字符流

InputStreamReader会包含一个InputStream，从而可以将该输入字节流转换成字符流
InputStream inputStream = new FileInputStream("c:\\data\\input.txt");
Reader reader = new InputStreamReader(inputStream);
int data = reader.read();
while(data != -1){
    char theChar = (char) data;
    data = reader.read();
}
reader.close();

read()方法返回一个包含了读取到的字符内容的int类型变量(译者注：0~65535)
int data = reader.read();
你可以把返回的int值转换成char变量，就像这样：
char aChar = (char) data; //译者注：这里不会造成数据丢失，因为返回的int类型变量data只有低16位有数据，高16位没有数据
如果方法返回-1，表明Reader中已经没有剩余可读取字符，此时可以关闭Reader。-1是一个int类型，不是byte或者char类型，这是不一样的。

OutputStreamWriter会包含一个OutputStream，从而可以将该输出字节流转换成字符流
OutputStream outputStream = new FileOutputStream("c:\\data\\output.txt");
Writer writer = new OutputStreamWriter(outputStream);
writer.write("Hello World");
writer.close();
OutputStreamWriter同样拥有将输出字节流转换成指定编码的字符流的构造函数。


FileReader与FileWriter用于处理文件内容。
FileReader能够以字符流的形式读取文件内容。
除了读取的单位不同之外(注：FileReader读取字符，FileInputStream读取字节)，FileReader与FileInputStream并无太大差异，
也就是说，FileReader用于读取文本。根据不同的编码方案，一个字符可能会相当于一个或者多个字节。
Reader reader = new FileReader("c:\\data\\input-text.txt");
int data = reader.read();
while(data != -1) {
    //do something with data...
    doSomethingWithData(data);
    data = reader.read();
}
reader.close();
FileReader拥有其他可选的构造函数，能够让你使用不同的方式读取文件，更多内容请查看官方文档。（类似FileInputStream）
FileReader会假设你想使用你所使用的JVM的版本的默认编码处理字节流，但是这通常不是你想要的，你可以手动设置编码方案。
如果你想明确指定一种编码方案，利用InputStreamReader配合FileInputStream来替代FileReader(译者注：FileReader没有可以指定编码的构造函数)。
InputStreamReader可以让你设置编码处理从底层文件中读取的字节。

FileWriter能够把数据以字符流的形式写入文件。
同样是处理文件，FileWriter处理字符，FileOutputStream处理字节。根据不同的编码方案，一个字符可能会相当于一个或者多个字节。
Writer writer = new FileWriter("c:\\data\\output.txt");
while(moreData) {
    String data = getMoreData();
    write.write(data);
}
writer.close();
处理文件都会碰到的一个问题是，当前写入的数据是覆盖原文件内容还是追加到文件末尾。
当你创建一个FileWriter之后，你可以通过使用不同构造函数实现你的不同目的。

以下的构造函数取文件名作为参数，将会新写入的内容将会覆盖该文件：
Writer writer = new FileWriter("c:\\data\\output.txt");
以下的构造函数取文件名和一个布尔变量作为参数，布尔值表明你是想追加还是覆盖该文件。例子如下：
Writer writer = new FileWriter("c:\\data\\output.txt", true); //appends to file
Writer writer = new FileWriter("c:\\data\\output.txt", false); //overwrites file
同样，FileWriter不能指定编码，可以通过OutputStreamWriter配合FileOutputStream替代FileWriter。


BufferedReader
BufferedWriter
BufferedReader和BufferedInputStream的主要区别在于，BufferedReader操作字符，而BufferedInputStream操作原始字节。
只需要把Reader包装到BufferedReader中，就可以为Reader添加缓冲区(译者注：默认缓冲区大小为8192字节，即8KB)
Reader input = new BufferedReader(new FileReader("c:\\data\\input-file.txt"));
你也可以通过传递构造函数的第二个参数，指定缓冲区大小，代码如下：
Reader input = new BufferedReader(new FileReader("c:\\data\\input-file.txt"), 8 * 1024);
这个例子设置了8KB的缓冲区。最好把缓冲区大小设置成1024字节的整数倍，这样能更高效地利用内置缓冲区的磁盘。
除了能够为输入流提供缓冲区以外，其余方面BufferedReader基本与Reader类似。BufferedReader还有一个额外readLine()方法，可以方便地一次性读取一整行字符。

与BufferedReader类似，BufferedWriter可以为输出流提供缓冲区。可以构造一个使用默认大小缓冲区的BufferedWriter(译者注：默认缓冲区大小8 * 1024B)
Writer writer = new BufferedWriter(new FileWriter("c:\\data\\output-file.txt"));
也可以手动设置缓冲区大小，代码如下：
Writer writer = new BufferedWriter(new FileWriter("c:\\data\\output-file.txt"), 8 * 1024);
为了更好地使用内置缓冲区的磁盘，同样建议把缓冲区大小设置成1024的整数倍。除了能够为输出流提供缓冲区以外，其余方面BufferedWriter基本与Writer类似。
类似地，BufferedWriter也提供了writeLine()方法，能够把一行字符写入到底层的字符输出流中。
值得注意是，你需要手动flush()方法确保写入到此输出流的数据真正写入到磁盘或者网络中。

CharArrayReader能够让你从字符数组中读取字符流
CharArrayWriter能够把字符写入到字符输出流writer中，并且能够将写入的字符转换成字符数组

char[] chars = ... //get char array from somewhere.
Reader reader = new CharArrayReader(chars);
int data = reader.read();
while(data != -1) {
    //do something with data
    data = reader.read();
}
reader.close();

CharArrayWriter writer = new CharArrayWriter();
//write characters to writer.
char[] chars = writer.toCharArray();


io中的其他字节流
PushbackInputStream，SequenceInputStream和PrintStream

PushbackInputStream用于解析InputStream内的数据。有时候你需要提前知道接下来将要读取到的字节内容，才能判断用何种方式进行数据解析。
PushBackInputStream允许你这么做，你可以把读取到的字节重新推回到InputStream中，以便再次通过read()读取。
eg:
PushbackInputStream input = new PushbackInputStream(new FileInputStream("c:\\data\\input.txt"));
int data = input.read();
input.unread(data);

可以通过PushBackInputStream的构造函数设置推回缓冲区的大小，代码如下：
PushbackInputStream input = new PushbackInputStream(new FileInputStream("c:\\data\\input.txt"), 8);
这个例子设置了8个字节的缓冲区，意味着你最多可以重新读取8个字节的数据

SequenceInputStream
SequenceInputStream把一个或者多个InputStream整合起来，形成一个逻辑连贯的输入流。
当读取SequenceInputStream时，会先从第一个输入流中读取，完成之后再从第二个输入流读取，以此推类。
InputStream input1 = new FileInputStream("c:\\data\\file1.txt");
InputStream input2 = new FileInputStream("c:\\data\\file2.txt");
InputStream combined = new SequenceInputStream(input1, input2);
SequenceInputStream的read()方法会在读取到当前流末尾时，关闭流，并把当前流指向逻辑链中的下一个流，最后返回新的当前流的read()值)。

PrintStream
PrintStream允许你把格式化数据写入到底层OutputStream中。比如，写入格式化成文本的int，long以及其他原始数据类型到输出流中，而非它们的字节数据。
PrintStream包含2个强大的函数，分别是format()和printf()(这两个函数几乎做了一样的事情，但是C程序员会更熟悉printf())。


Java IO: 其他字符流
PushbackReader，LineNumberReader，StreamTokenizer，PrintWriter，StringReader，StringWriter.

PushbackReader与PushbackInputStream类似，唯一不同的是PushbackReader处理字符，PushbackInputStream处理字节。代码如下：
PushbackReader reader = new PushbackReader(new FileReader("c:\\data\\input.txt"));
int data = reader.read();
reader.unread(data);
同样可以设置缓冲区大小，代码如下：
PushbackReader reader = new PushbackReader(new FileReader("c:\\data\\input.txt"), 8);

LineNumberReader是记录了已读取数据行号的BufferedReader。默认情况下，行号从0开始，当LineNumberReader读取到行终止符时，行号会递增(译者注：换行\n，回车\r，或者换行回车\n\r都是行终止符)。

你可以通过getLineNumber()方法获取当前行号，通过setLineNumber()方法设置当前行数(译者注：setLineNumber()仅仅改变LineNumberReader内的记录行号的变量值，不会改变当前流的读取位置。
流的读取依然是顺序进行，意味着你不能通过setLineNumber()实现流的跳跃读取)。代码如下：
LineNumberReader reader = new LineNumberReader(new FileReader("c:\\data\\input.txt"));
int data = reader.read();
while(data != -1){
    char dataChar = (char) data;
    data = reader.read();
    int lineNumber = reader.getLineNumber();
}
如果解析的文本有错误，LineNumberReader可以很方便地定位问题。当你把错误报告给用户时，如果能够同时把出错的行号提供给用户，用户就能迅速发现并且解决问题。


StreamTokenizer
StreamTokenizer(译者注：请注意不是StringTokenizer)可以把输入流(译者注：InputStream和Reader。
通过InputStream构造StreamTokenizer的构造函数已经在JDK1.1版本过时，推荐将InputStream转化成Reader，
再利用此Reader构造StringTokenizer)分解成一系列符号。比如，句子”Mary had a little lamb”的每个单词都是一个单独的符号。

当你解析文件或者计算机语言时，为了进一步的处理，需要将解析的数据分解成符号。通常这个过程也称作分词。
通过循环调用nextToken()可以遍历底层输入流的所有符号。
在每次调用nextToken()之后，StreamTokenizer有一些变量可以帮助我们获取读取到的符号的类型和值。
这些变量是：
ttype 读取到的符号的类型(字符，数字，或者行结尾符)
sval 如果读取到的符号是字符串类型，该变量的值就是读取到的字符串的值
nval 如果读取到的符号是数字类型，该变量的值就是读取到的数字的值

代码如下：
StreamTokenizer tokenizer = new StreamTokenizer(new StringReader("Mary had 1 little lamb..."));
while(tokenizer.nextToken() != StreamTokenizer.TT_EOF){
    if(tokenizer.ttype == StreamTokenizer.TT_WORD) {
        System.out.println(tokenizer.sval);
    } else if(tokenizer.ttype == StreamTokenizer.TT_NUMBER) {
        System.out.println(tokenizer.nval);
    } else if(tokenizer.ttype == StreamTokenizer.TT_EOL) {
        System.out.println();
    }
}
译者注：TT_EOF表示流末尾，TT_EOL表示行末尾。

StreamTokenizer可以识别标示符，数字，引用的字符串，和多种注释类型。你也可以指定何种字符解释成空格、注释的开始以及结束等。
在StreamTokenizer开始解析之前，所有的功能都可以进行配置。请查阅官方文档获取更多信息。


StringReader
StringReader能够将原始字符串转换成Reader，代码如下：
Reader reader = new StringReader("input string...");
int data = reader.read();
while(data != -1) {
    //do something with data...
    doSomethingWithData(data);
    data = reader.read();
}
reader.close();

StringWriter
StringWriter能够以字符串的形式从Writer中获取写入到其中数据，代码如下：
StringWriter writer = new StringWriter();
//write characters to writer.
String data = writer.toString();
StringBuffer dataBuffer = writer.getBuffer();
toString()方法能够获取StringWriter中的字符串数据。

getBuffer()方法能够获取StringWriter内部构造字符串时所使用的StringBuffer对象。


二、io综述：
I/O 问题是任何编程语言都无法回避的问题，可以说 I/O 问题是整个人机交互的核心问题，因为 I/O 是机器获取和交换信息的主要渠道。
在当今这个数据大爆炸时代，I/O 问题尤其突出，很容易成为一个性能瓶颈。正因如此，所以 Java 在 I/O 上也一直在做持续的优化，
如从 1.4 开始引入了 NIO，提升了 I/O 的性能。关于 NIO 我们将在后面详细介绍。

Java 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：
基于字节操作的 I/O 接口：InputStream 和 OutputStream
基于字符操作的 I/O 接口：Writer 和 Reader
基于磁盘操作的 I/O 接口：File
基于网络操作的 I/O 接口：Socket
前两组主要是根据传输数据的数据格式，后两组主要是根据传输数据的方式，虽然 Socket 类并不在 java.io 包下，但是我仍然把它们划分在一起，
因为我个人认为 I/O 的核心问题要么是数据格式影响 I/O 操作，要么是传输方式影响 I/O 操作，也就是将什么样的数据写到什么地方的问题，
I/O 只是人与机器或者机器与机器交互的手段，除了在它们能够完成这个交互功能外，我们关注的就是如何提高它的运行效率了，
而数据格式和传输方式是影响效率最关键的因素了。我们后面的分析也是基于这两个因素来展开的。

基于字符的 I/O 操作接口
不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，但是为啥有操作字符的 I/O 接口呢？
这是因为我们的程序中通常操作的数据都是以字符形式，为了操作方便当然要提供一个直接写字符的 I/O 接口，如此而已。我们知道字符到字节必须要经过编码转换，
而这个编码又非常耗时，而且还会经常出现乱码问题，所以 I/O 的编码问题经常是让人头疼的问题。
不管是 Writer 还是 Reader 类它们都只定义了读取或写入的数据字符的方式，也就是怎么写或读，但是并没有规定数据要写到哪去，
写到哪去就是我们后面要讨论的基于磁盘和网络的工作机制。

另外数据持久化或网络传输都是以字节进行的，所以必须要有字符到字节或字节到字符的转化。
InputStreamReader 类是字节到字符的转化桥梁，InputStream 到 Reader 的过程要指定编码字符集，否则将采用操作系统默认字符集，很可能会出现乱码问题。
StreamDecoder 正是完成字节到字符的解码的实现类。

磁盘 I/O 工作机制
前面介绍了基本的 Java I/O 的操作接口，这些接口主要定义了如何操作数据，以及介绍了操作两种数据结构：字节和字符的方式。还有一个关键问题就是数据写到何处，
其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘的过程。
我们知道数据在磁盘的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的一个最小单元。
值得注意的是 Java 中通常的 File 并不代表一个真实存在的文件对象，当你通过指定一个路径描述符时，它就会返回一个代表这个路径相关联的一个虚拟对象，
这个可能是一个真实存在的文件或者是一个包含多个文件的目录。
为何要这样设计？因为大部分情况下，我们并不关心这个文件是否真的存在，而是关心这个文件到底如何操作。
何时真正会要检查一个文件存不存？就是在真正要读取这个文件时，例如 FileInputStream 类都是操作一个文件的接口，注意到在创建一个 FileInputStream 对象时，
会创建一个 FileDescriptor 对象，其实这个对象就是真正代表一个存在的文件对象的描述，
当我们在操作一个文件对象时可以通过 getFD() 方法获取真正操作的与底层操作系统关联的文件描述。
例如可以调用 FileDescriptor.sync() 方法将操作系统缓存中的数据强制刷新到物理磁盘中。
当传入一个文件路径，将会根据这个路径创建一个 File 对象来标识这个文件，然后将会根据这个 File 对象创建真正读取文件的操作对象，
这时将会真正创建一个关联真实存在的磁盘文件的文件描述符 FileDescriptor，通过这个对象可以直接控制这个磁盘文件。
由于我们需要读取的是字符格式，所以需要 StreamDecoder 类将 byte 解码为 char 格式，至于如何从磁盘驱动器上读取一段数据，由操作系统帮我们完成。
至于操作系统是如何将数据持久化到磁盘以及如何建立数据结构需要根据当前操作系统使用何种文件系统来回答，至于文件系统的相关细节可以参考另外的文章。

Java Socket 的工作机制
Socket 这个概念没有对应到一个具体的实体，它是描述计算机之间完成相互通信一种抽象功能。
大部分情况下我们使用的都是基于 TCP/IP 的流套接字，它是一种稳定的通信协议。
主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。
建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，
但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。
这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。

建立通信链路
当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，
并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。
在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 IOException 错误。
与之对应的服务端将创建一个 ServerSocket 实例，ServerSocket 创建比较简单，只要指定的端口号没有被占用，一般实例创建都会成功，
同时操作系统也会为 ServerSocket 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。
之后当调用 accept() 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，
该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 ServerSocket 实例的一个未完成的连接数据结构列表中，
注意这时服务端与之对应的 Socket 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 Socket 实例才会返回，
并将这个 Socket 实例对应的数据结构从未完成列表中移到已完成列表中。所以 ServerSocket 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。

数据传输
传输数据是我们建立连接的主要目的，如何通过 Socket 传输数据，下面将详细介绍。
当连接已经建立成功，服务端和客户端都会拥有一个 Socket 实例，每个 Socket 实例都有一个 InputStream 和 OutputStream，正是通过这两个对象来交换数据。
同时我们也知道网络 I/O 都是以字节流传输的。当 Socket 对象创建时，操作系统将会为 InputStream 和 OutputStream 分别分配一定大小的缓冲区，
数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 OutputStream 对应的 SendQ 队列中，当队列填满时，
数据将被发送到另一端 InputStream 的 RecvQ 队列中，如果这时 RecvQ 已经满了，
那么 OutputStream 的 write 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。
值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率，由于可能会发生阻塞，
所以网络 I/O 与磁盘 I/O 在数据的写入和读取还要有一个协调的过程，如果两边同时传送数据时可能会产生死锁，在后面 NIO 部分将介绍避免这种情况。


BIO 带来的挑战
BIO 即阻塞 I/O，不管是磁盘 I/O 还是网络 I/O，数据在写入 OutputStream 或者从 InputStream 读取时都有可能会阻塞。
一旦有线程阻塞将会失去 CPU 的使用权，这在当前的大规模访问量和有性能要求情况下是不能接受的。虽然当前的网络 I/O 有一些解决办法，
如一个客户端一个处理线程，出现阻塞时只是一个线程阻塞而不会影响其它线程工作，还有为了减少系统线程的开销，采用线程池的办法来减少线程创建和回收的成本，
但是有一些使用场景仍然是无法解决的。如当前一些需要大量 HTTP 长连接的情况，像淘宝现在使用的 Web 旺旺项目，服务端需要同时保持几百万的 HTTP 连接，
但是并不是每时每刻这些连接都在传输数据，这种情况下不可能同时创建这么多线程来保持连接。即使线程的数量不是问题，仍然有一些问题还是无法避免的。
如这种情况，我们想给某些客户端更高的服务优先级，很难通过设计线程的优先级来完成，
另外一种情况是，我们需要让每个客户端的请求在服务端可能需要访问一些竞争资源，由于这些客户端是在不同线程中，因此需要同步，
而往往要实现这些同步操作要远远比用单线程复杂很多。以上这些情况都说明，我们需要另外一种新的 I/O 操作方式---NIO
NIO 的工作方式以后详细介绍。


三、设计模式：
io中的适配器模式
通过使用Adatper模式，可以使得通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。
Adatper持有Adatpee，使得Client调用Adatper实现操作，而Adatper的实现过程是通过Adatpee来搞定的。
由于InputStream是字节流不能享受到字符流读取字符那么便捷的功能，因此借助
InputStreamReader将其转为Reader子类，因此可以拥有便捷操作文本文件方法。
public InputStreamReader(InputStream in)

io中的装饰者模式
public BufferedInputStream(InputStream in)
BufferedInputStream“装饰”了InputStream的内部工作方式，使得流的读入操作使用了缓冲机制。
在使用了缓冲机制后，不会对每一次的流读入操作都产生一个物理的读盘动作，从而提高了程序的效率
