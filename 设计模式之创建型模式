 创建型模式包括： 单例模式，简单工厂模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式 
 
一、单例模式
可以使用单例模式的类都有一个共性，那就是这个类没有自己的状态，这些类无论你实例化多少个，其实都是一样的，而且更重要的一点是，这个类如果有两个或者两个以上的实例的话，
我的程序竟然会产生程序错误或者与现实相违背的逻辑错误。
这样的话，如果我们不将这个类控制成单例的结构，应用中就会存在很多一模一样的类实例，这会非常浪费系统的内存资源，而且容易导致错误甚至一定会产生错误，
所以我们单例模式所期待的目标或者说使用它的目的，是为了尽可能的节约内存空间，减少无谓的GC消耗，并且使应用可以正常运作。
一般一个类能否做成单例，最容易区别的地方就在于，这些类，在应用中如果有两个或者两个以上的实例会引起错误，就是这些类，在整个应用中，同一时刻，有且只能有一种状态。
一般实践当中，有很多应用级别的资源会被做成单例，比如配置文件信息，逻辑上来讲，整个应用有且只能在同在时间有一个，当然如果你有多个，这可能并不会引起程序级别错误，
这里指的错误特指异常或者ERROR。但是当我们试图改变配置文件的时候，问题就出来了。
你有两种选择，第一种，将所有的实例全部更新成一模一样的状态。第二种，就是等着出现问题。
然而出现的问题大部分是逻辑层次上的错误，个人觉得这是比程序错误更加严重的错误，因为它不会告诉你空指针，不会告诉你非法参数，很多时候要等到影响到客户使用时才会被发现。
